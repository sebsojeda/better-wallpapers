generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Image {
  id           Int            @id @default(autoincrement())
  authorName   String?        @db.VarChar(255)
  authorUrl    String?        @db.VarChar(255)
  blurHash     String         @db.VarChar(32)
  externalId   String         @unique @db.VarChar(255)
  visible      Boolean        @default(false)
  TagsOnImages TagsOnImages[]
}

model Tag {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(255)
  TagsOnImages TagsOnImages[]
}

model TagsOnImages {
  imageId Int
  image   Image @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tagId   Int
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([imageId, tagId])
  @@index([imageId])
  @@index([tagId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
